(ADD TO THIS FILE AS LIBS ARE ADDED/REMOVED)
(MARK WHEN DOCUMENTED ON WIKI) *wiki* 
(SETTLE ON A COMMON DESTRUCTION / CLEANUP NAME FOR ALL LIBS)

-- ==
--    round(val, n) - Rounds a number to the nearest decimal places. (http://lua-users.org/wiki/FormattingNumbers)
--    val - The value to round.
--    n - Number of decimal places to round to.
-- ==


actions
--------
actions.pathFollowingattach( obj, points, pathSmoothing, easing )
actions.pathFollowingstart( obj ) -- INCOMPLETE
actions.pathFollowingpause( obj ) -- INCOMPLETE
actions.pathFollowingreset( obj ) -- INCOMPLETE
actions.pathFollowingstop( obj ) -- INCOMPLETE
actions.pathFollowingdetach( obj ) -- INCOMPLETE

actions.facePoint( obj, x, y, dps, easing )
actions.faceObject( objA, objB, dps, easing )

actions.moveToPoint( obj, x, y, pps, easing )
actions.moveToObject( objA, objB, pps, easing )

actions.seekTest(objA, objB, maxDist, maxAngle )
actions.seekObject( objA, targetTable, maxDist, maxAngle)

actions.aimAtObject( objA, target, period, onLoseCB )
actions.aimAtObjectMaxDist( objA, target, period, maxDist, onLoseCB, reseek ) -- INCOMPLETE?


advanced
--------
advanced.addCustom_removeSelf( obj, custom_removeSelf)
advanced.stackMethods( obj, methodName, newFunc) - INCOMPLETE; FINISH
advanced.stackFunctions( obj, methodName, newFunc) - INCOMPLETE; FINISH

behaviors
---------
OFFLINE (CONVERT TO COMPONENTS)

buttons
--------
buttonClass.getCurrentRadio( group )
buttonClass:addPreset( presetName, params )
buttonClass:new( parentGroup, params )

function buttonInstance:pressed( ) 
buttonInstance:toggle( ) 
buttonInstance:disable( ) 
buttonInstance:enable( ) 
buttonInstance:isEnabled() 
buttonInstance:getText( ) 
buttonInstance:setText( text ) 
buttonInstance:getTextColor( text ) 
buttonInstance:setTextColor( color ) 
buttonInstance:adjustTextOffset( offset ) 
buttonInstance:setHighlight( vis )	-- internal only


buttonClass:presetPush( parentGroup, presetName, x, y, w, h, text, onRelease, overrideParams)
buttonClass:presetToggle( parentGroup, presetName, x,y,w,h, text,onEvent, overrideParams)
buttonClass:presetRadio( parentGroup, presetName, x,y,w,h, text,onRelease, overrideParams)

buttonClass:quickHorizSlider( x,y,w,h,imageBase,onEvent,onRelease,knobImg, kw,kh, parentGroup)
tmpButton:getValue()
tmpButton:setValue( val )
tmpButton:disable( ) 
tmpButton:enable( ) 


collisionCalculator
-------------------
collisionsCalculatorManger:newCalculator()

collisionsCalculator:addName( colliderName )
collisionsCalculator:configureCollision( colliderNameA, colliderNameB )
collisionsCalculator:collidesWith( colliderNameA, ... )
collisionsCalculator:getCategoryBits( colliderName )
collisionsCalculator:getMaskBits( colliderName )
collisionsCalculator:getCollisionFilter( colliderName )
collisionsCalculator:dump()

components
----------
components.addDrag( obj, params ) -- RENAME THIS TO addTouchDrag

components.hasForces( obj )
obj:addForce = function( self, forceName, forceValue, params )
obj:removeForce = function( self, forceName )
obj:removeAllForces = function( self )
obj:getForce = function( self, forceName )
obj:setForce = function( self, forceName, forceValue )
obj:enableForces = function( self )
obj:disableForces = function( self )
obj:forceEnabled = function( self )
obj:toggleForces = function( self )
obj:dumpForces = function( self )
obj:remove_hasForce = function( self ) -- ADD THIS


components.hasForce( obj, forceValue, params )
obj:remove_hasForce = function( self )
obj:getForce = function( self )
obj:setForce = function( self, forceValue )
obj:enableForce = function( self )
obj:disableForce = function( self )
obj:forceEnabled = function( self )
obj:toggleForce = function( self )
obj:dumpForce = function( self )

components.movesForward( obj, velocity )
obj:remove_movesForward = function( self )
obj:getForwardVelocity = function( self )
obj:setForwardVelocity = function( self, velocity )
obj:enableForwardVelocity = function( self )
obj:disableForwardVelocity = function( self )
obj:movesForwardEnabled = function( self )
obj:toggleMovesFoward = function( self )
obj:dumpMovesForward = function( self )
obj:remove_movesForward = function( self ) -- ADD THIS


database manager (COMPLETE THIS CLASS; MAKE TUT FOR CREATING DB)
--------------------------------------
dbMgr:newDB( dbpath )

db:isWordInDB( word )
db:findWordInDB( word )
db:testSearchSpeed( iterations )

debug
-----
debug.dumpFonts = function()
debug.dumpScreenMetrics = function()
debug.monitorMem = function() -- RENAME THIS
debug.printLuaVersion = function ()

debugPrint
----------
function dp.newPrinter( debugLevel )
function thePrinter:setLevel( level )
function thePrinter.print( level, ... )
--[[
d To use a debug printer in your own code do the following:<br>
d <br>
d At the top of your code/file, add these lines:<br>
e2 --local debugLevel = 1 -- Comment out to get global debugLevel from main.lua
e2 local dp = ssk.debugPrinter.newPrinter( debugLevel )
e2 local dprint = dp.print
d
d Later to call the debug printer in this file use code like this:
e2
e2 dprint( 2, "Some message", "that should", "only print at level 2 or higher")
d<br>
--]]



display (convert to components away from behaviors)
-------
displayBuilders.rect( group, x, y, visualParams, bodyParams, behaviorsList )
displayBuilders.circle( group, x, y, visualParams, bodyParams, behaviorsList )
displayBuilders.imageRect( group, x, y, imgSrc, visualParams, bodyParams, behaviorsList )
displayBuilders.imageCircle( group, x, y, imgSrc, visualParams, bodyParams, behaviorsList )

displayBuilders.listDPP()
displayBuilders.getDPP(name)
displayBuilders.setDPP(name,value)

displayBuilders.quickLayers( parentGroup, ... )

displayBuilders.arrowhead( group, x, y, width, height, visualParams )
displayBuilders.arrow( group, startX, startY, endX, endY, visualParams )
displayBuilders.arrow2( group, startX, startY, angle, length, visualParams)
displayBuilders.line( group, startX, startY, endX, endY, visualParams )
displayBuilders.line2( group, startX, startY, angle, length, visualParams )
displayBuilders.segmentedLine( group, points, visualParams )



gamePiece
---------
gamePieceClass:new( group, x, y, params )	

thePiece:getBase()
thePiece:getImages()
thePiece:showImage( imgIndex )
thePiece:showImages( )
thePiece:hideImages( )


gem (update to work with objects too)
---
gameEventManger:add( eventName, handler, group )
gameEventManger:remove( eventName, handler )
gameEventManger:removeGroup( group )
gameEventManger:removeAll( ) -- Does not affect grouped events (yet)
gameEventManger:post( eventName, eparams )


global variables
----------------
*wiki*

global
------
*wiki* fnn( ... ) 
*wiki* isDisplayObject( obj )
*wiki* safeRemove( obj )
*wiki* randomColor( ) 
*wiki* round(val, n)


huds (SPLIT INTO MULTIPLE FILES)
----
hudBuilder:createTimeHUD( x, y, presetName, group, params )
theHUD:get()
theHUD:set( seconds )
theHUD:autoCount( maxTime, callback)
theHUD:autoCountDown( minTime, callback ) -- EFM swap order of args, make minTime optional
theHUD:stop()

hudBuilder:createNumericScoreHUD( x, y, digits, presetName, group, params)
theHUD:get()
theHUD:set( value )
theHUD:increment( value )

hudBuilder:createHorizImageCounter( group, x, y, imgSrc, imgW, imgH, maxValue, intialValue )
theHUD:set( value )
theHUD:get()
horizImageCounterHUD:increment

hudBuilder:createPercentageDial( group, x, y, params )
hud.getPercent = function( self )
hud.setPercent = function( self, percent )

hudBuilder:createPercentageBar( group, x, y, params )
hud.getPercent = function( self )
hud.setPercent = function( self, percent )

hudBuilder:createPercentageImageBar( group, x, y, params )
hud.getPercent = function( self )
hud.setPercent = function( self, percent )


imageSheet manager (FINISH THIS: USE MORE TO DECIDE WHAT IT NEEDS)
------------------
imageSheets:sheetExists( sheetName )
imageSheets:getSheet( sheetName )
imageSheets:destroySheet( sheetName )
imageSheets:createSheet( sheetName, sheetImg, sheetParams, preload )


inputs (rename to input devices?  NEED A BETTER NAME)
------
inputsFactory:createJoystick( x, y, outerRadius, deadZoneRadius, stickRadius, eventName, group )
joystick:destroy( event ) --INCOMPLETE

inputsFactory:createVirtualJoystick( x, y, outerRadius, deadZoneRadius, stickRadius, eventName, inputObj, group )
virtualJoystick:destroy( event ) --INCOMPLETE

inputsFactory:createHorizontalSnap( x, y, snapHeight, snapWidth, deadZoneWidth, stickSize, eventName, group )
horizSnap:destroy( event ) --INCOMPLETE

inputsFactory:createVirtualHorizontalSnap( x, y, snapHeight, snapWidth, deadZoneWidth, stickSize, eventName, inputObj, group )
virtualhorizSnap:destroy( event )  --INCOMPLETE

inputsFactory:createVerticalSnap( x, y, snapWidth, snapHeight, deadZoneHeight, stickSize, eventName, group )
vertSnap:destroy( event )  --INCOMPLETE

inputsFactory:createVirtualVerticalSnap( x, y, snapWidth, snapHeight, deadZoneHeight, stickSize, eventName, inputObj, group )
virtualVertSnap:destroy( event )  --INCOMPLETE


io
--
io.exists( fileName, base )
io.readFile( fileName, base )
io.writeFile( dataToWrite, fileName, base )
io.appendFile( dataToWrite, fileName, base )


labels
------
labelClass:addPreset( presetName, params )

labelClass:new( params, screenGroup )
labelInstance:setText( text )
labelInstance:setLabelTextColor( textColor )
labelInstance:setHighlightTextColor( textColor )
labelInstance:setShadowTextColor( textColor )
labelInstance:setTextColors( embossTextColor, embossHighlightColor, embossShadowColor )
labelInstance:getText()
labelInstance:setText( text )
labelInstance:setLabelTextColor( textColor )
labelInstance:setHighlightTextColor( textColor )
labelInstance:setShadowTextColor( textColor )
labelInstance:setTextColors( embossTextColor, embossHighlightColor, embossShadowColor )
labelInstance:getText()

labelClass:presetLabel( group, presetName, text, x, y, params  )

labelClass:quickLabel( group, text, x, y, font, fontSize, textColor )

labelClass:quickEmbossedLabel( group, text, x, y, font, fontSize, embossTextColor, embossHighlightColor, embossShadowColor )


math
----
math.calculateWrapPoint( objectToWrap, wrapRectangle )
math.pointInRect = function( pointX, pointY, left, top, width, height )
*wiki* math.fastfib(n)
math.PascalsTriangle(n)
math.PascalsTriangle_lastRow(n)



2d math
-------
function math2do.add( ... ) -- ( objA, objB [, altRet] ) or ( x1, y1, x2, y2, [, altRet]  )
function math2do.sub( ... ) -- ( objA, objB [, altRet] ) or ( x1, y1, x2, y2, [, altRet]  )
function math2do.dot( ... ) -- ( objA, objB ) or ( x1, y1, x2, y2 )
function math2do.length( ... ) -- ( objA ) or ( x1, y1 )
function math2do.squarelength( ... ) -- ( objA ) or ( x1, y1 )
function math2do.scale( ... ) -- ( objA, scale [, altRet] ) or ( x1, y1, scale, [, altRet]  )
function math2do.normalize( ... ) -- ( objA [, altRet] ) or ( x1, y1 [, altRet]  )
function math2do.normals( ... ) -- ( objA [, altRet] ) or ( x1, y1 [, altRet]  )
function math2do.vector2Angle( ... ) -- ( objA ) or ( x1, y1 )
function math2do.angle2Vector( angle, tableRet )
function math2do.cartesian2Screen( ... ) -- ( objA [, altRet] ) or ( x1, y1 [, altRet]  )
function math2do.screen2Cartesian( ... ) -- ( objA [, altRet] ) or ( x1, y1 [, altRet]  )
-- FOLLOWING FUNCTIONS NEED WORK --
math2do.tweenAngle( objA, objB )
math2do.tweenDist( objA, objB )
math2do.tweenData( objA, objB )


miscellaneous (KEEP THESE?)
-------------
misc.convertSecondsToTimer( seconds )
misc.processEvent( obj, event, doDeltas, doTouchVec, doTouchAngle )


networking utilities (uses external)
------------------------------------
networking:isNetworking()
networking:msgServer( msg, data ) 
networking:msgClient( aClient, msg, data  )
networking:msgClients( msg, data )
networking:getNumClients(  )
networking:getClientsTable(  )
networking:startServer( )
networking:startClient( )
networking:scanServers( durationMS )
networking:stopScanning( )
networking:setCustomBroadcast( newBroadcast ) 
networking:autoconnectToHost( )
networking:connectToSpecificHost( hostIP )
networking:stop()
networking:stopClient()
networking:stopServer()
networking:getClientByKey( key )
networking:setClient( client )
networking:isConnectedToServer()
networking:isServerRunning()
networking:isClientRunning()
networking:isConnectedToWWW( url )
networking:setMyName( name  )
networking:setMyFinalScore( finalScore  )
networking:setMyData( dataTable  )
networking:clearMyName( )
networking:clearMyFinalScore( )
networking:clearMyData( )
networking:getNames( )  
networking:getFinalScores( )  
networking:setClientPlayerScore( aClient, score  )
networking:getClientPlayerScore( aClient  )
networking:getClientPlayerScores( aClient  ) -- EFM THIS IS WRONG
networking:clearClientPlayerScores( aClient  )
networking:registerCallbacks()

points
------
pointsFactory:new( ... )
pointsInstance:add(...)
pointsInstance:insert(index, ...)
pointsInstance:get(index)
pointsInstance:remove(index)
pointsInstance:push(...)
pointsInstance:peek()
pointsInstance:pop()
pointsInstance:push_head(...)
function pointsInstance:peek_head()
pointsInstance:pop_head(x,y)

sequencer (FINISH THIS)
---------
sequencer:new( )
seq.load = function( self, fileName, base )
seq.set = function( self, seqTable )
seq.run = function( self, obj, index )


sounds (THIS NEEDS TO BE MORE ROBUST AND TO HANDLE MULTIPLE CHANNELS)
(consider GG sound mgr as replacement or useful input)
------
soundMgr:addEffect( name, file, stream, preload  )
soundMgr:addMusic( name, file, preload, fadein, stream  )
soundMgr:setEffectsVolume( value )
soundMgr:getEffectsVolume( )
soundMgr:setMusicVolume( value )
soundMgr:getMusicVolume(  )
soundMgr:play( name )
soundMgr:stop( name )

standard button callbacks
-------------------------
standardCallbacks.prep_tableRoller( button, srcTable, chainedCB, underBarSwap ) 
standardCallbacks.tableRoller_CB( event ) 

standardCallbacks.prep_table2TableRoller( button, dstTable, entryName, srcTable, chainedCB ) 
standardCallbacks.table2TableRoller_CB( event ) 

standardCallbacks.prep_tableToggler( button, dstTable, entryName, chainedCB ) 
standardCallbacks.tableToggler_CB( event ) 

standardCallbacks.prep_horizSlider2Table( button, dstTable, entryName, chainedCB ) 
standardCallbacks.horizSlider2Table_CB( event )


string
------
string:split(tok)
string:getWord( index )
string:getWordCount( )
string:getWords( index, endindex )
string:setWord( index, replace )

string:getField( index )
string:getFieldCount( )
string:getFields( index, endindex )
string:setField( index, replace )


string:getRecord( index )
string:getRecordCount( )
string:getRecords( index, endindex )
string:setRecord( index, replace )

string:spaces2underbars( )
string:underbars2spaces( )

string:printf(...)

string:lpad (len, char)
string:rpad(len, char)


table
-----
table.shuffle = function( t, iter )
function table.combineUnique( ... )
function table.combineUnique_i( ... )
function table.shallowCopy( src, dst )
function table.deepCopy( src, dst )
function table.save( theTable, fileName, base )
function table.load( fileName, base )
function table.dump(theTable, padding )
table.print_r = function ( t )  (PROPERLY CREDIT)


util (POSSIBLY REMOVE THIS)
----
